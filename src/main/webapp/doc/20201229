 D:\A_TeachingMaterial\6.JspSpring\workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\work

서블릿을 jsp로 변환
최초 요청이 일어났을 때 변환이 됨

1. jsp는 servlet으로 변환되어 서비스 된다
2. servlet-container(tomcat)이 jsp를 서브릿으로 변환하는 과정에서
   사용하는 폴더는 work 폴더
    - tomcat도 개발자가 만든 프로그램으로 비정상적으로 동작할 때가 있음
    - 개발자가 jsp파일을 수정하였음에도 수정 내역이 반영되지 않을 경우
       work 폴더에 생성된 jsp 변환 파일들(java, class)을 삭제 해주면 새롭게 만들어 준다.
3. jsp를 서블릿으로 변환하는 시기는 해당 jsp에 대해 최초 요청이 일어 났을 경우에 변환
    - 서블릿으로 생성이 된 이후 같은 파일에 대한 요청은 이미 변환된 파일로 서비스

지시자
스크립틀릿 : java code => JSTL으로 대체
표현식 : 출력 => EL으로 대체
주석
선언부 : 변수, 메서드 선언 ==> View와는 크게 관련이 없는 부분

jsp안에서는 get이나 post나 head만 받는다 아니면 에러메세지 호출


--------------------------------------
test라이브러리
junit

예약
FactorialTest 테스트 할떼는 클래스이름과같게하고 접미어로 Test


서블릿은 서버에 의존을 많이해 단독으로 실행이 어려움

maven package 시 test 코드 실행 스킵
mvn package -Dmaven.test.skip=true

HttpServletRequest : 사용자가 요청을 보낼때의 정보(파라미터, 헤더, 쿠키)를 은닉화한 객체
		 servlet-container에서 생성
		 servlet-container가 생성하여 service 메소드를 호출할 때 사용되는 인자 service(doXXX)
주요 사용 용도
      1. 파라미터
	. 인위 조작이 불가
	  getParameter는 존재하지만 setParameter 메소드는 없음
	   ==> request 클래스의 Wrapper 클래스를 이용하여 파라미터 조작가능
      2. 헤더 정보 확인
      3. 속성(attribute)정보 설정, 조회
	. 개발자가 인위 조작 가능
	  getAttribute, serAttribute 메소드 존재
      4. contextPath 확인
	서블릿 + 컨텐츠(js, css, image 등)들의 집합
	webApplication =(유사) contextPath
	request.getContextPath()를 동해 contextPath 문자열을 얻어올 수 있다.
	서버하나에 여러개의 웹 어플리케이션을 서비스 하는 것이 가능
	==> url 요청시 어떤 웹 어플리케이션을 의미하는지 구분이 필요
	http://도메인/CONTEXT_PATH/경로

	==> css, javasctipt, image 파일의 경로를 설정할때 사용
	       jsp라는 이름으로 contextPath가 설정된 웹어플리케이션의 경우
	       webapp/image/brown.png 파일의 경로를 다음과 같이 설정할 수 있다
	       <img src="/jsp/image/brown.png"/>
	       
	       ==> jsp라는 이름의 컨텍스트 패스를 수정할 경우 링크와 관련된 부분을 모두 수정해야하는 문제점이 발생

		requset.getContext()메소드를 통해 유지 보수 문제 해결 가능
		<img src="<%=request.getContextPath()%>/image/brown.png"/>

	webapp/jsp/request.jsp

	jsp 파일 내용 : request 객체에서 저공하는 메소드와, 메소드의 리턴값을 확인

	<body>
	      request.getContentType() : 리턴값을 출력<br>
	      request.getMethod() : 리턴값을 출력<br> (중요!)
	      request.getRequestURL() : 리턴값을 출력<br>
	      request.getContextPath() : 리턴값을 출력<br> (중요!)
	      request.getServerPort() : 리턴값을 출력<br>
	</body>




