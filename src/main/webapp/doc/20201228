※ System.out.println 앞으로 사용금지

※println 은 동기화로 구성되었기 때문에 여러 곳에서 동시에 실행될 때 
  요청이 많을수록 println에서 대기하는 시간이 길어짐으로 서버가 다운될수도 있음

logging 사용 이유 : 개발시 의도한대로 동작하고 있는지 검사(라이트)
ex) : 웹브라우저를 통해 server로 요청(localhost/basicServlet)
     doGet메소드가 호출이 되었는지 로그를 통해 확인
     파라미터가 의도한대로 서블릿으로 전달이 되었는지 확인
logging과 비슷한 목적으로 사용하는 것 : 디버깅(디테일)

등록된 url매핑으로 서블릿 실행



SLF4J(인터페이스로 생각)


<!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic -->
<dependency>
    <groupId>ch.qos.logback</groupId>
    <artifactId>logback-classic</artifactId>
    <version>1.2.3</version>
    <scope>test</scope>
</dependency>




1세대 : 호환이 잘안됨(ex)log4j)



선언부와 구현부가 나뉘어져 있어서
선언쪽에서 수정을 하더라도 구현부는 건들필요가 없음


clean

default (비중높음) {Comfile, Test, Packge, deploy, install}

site

test => 스코프에서 lib 폴더 및 jar파일 만드는거 제외 (꼭 지워주는작업)

k.or.ddit.servlet.basic.BasicServlet ( 경로 길이가 너무 길면 이름을 줄여줌)
10:12:14.007(시간) [http-nio-80-exec-3](스레드) DEBUG k.or.ddit.servlet.basic.BasicServlet(위치) - basicServlet.doGet() (내용)

trace(상세정보) < debug(디버깅정보) < info(상태변경시) < warn(향후 문제 발생가능성) < error(에러발생) 순으로 중요

로깅 문자열 결합을 피하기 위한 방법
문자열 + 문자열 실행시 스트링이 스트링 버퍼로 바뀐뒤 연산 수행 (시스템을 돌리기 무거워짐)
logger.debug("basicServlet.doGet() userid paramter : {} {} ",req.getParameter("userid"),req.getParameter("password")); 처리


log level 설정에 따른 logger 메소드 동작여부


===========================================================================================================


servlet : java에 html코드를 삽입
		생기는 문제점
		  1. html 코드들이 문자 취급되기 때문에 오타를 발견하기가 어려움
		  2. 협업의 문제점
		  	java - 프로그래머
		  	html - 디자이너
		  3. 개발자가 코드를 리딩하는데 가독성의 문제 심각
		  	==> jsp의 탄생 배경
jsp : html코드에 java코드를 삽입
		요청에 따라 동적으로 컨텐츠 생성
		jsp는 화면구성이 중심임
		서블릿은 로직 jsp는 화면처리라 생각
		
work 는 jsp 을 우리가만든 서블릿을 jsp로 변환

























