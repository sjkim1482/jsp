model1 : 요청을 jsp가 접수, 응답도 jsp에서 생성
		 비지니스 로직(model)이 jsp(view)안에서 호출됨
		 만약 다른 jsp(view)에서도 동일한 비지니스 로직(model)을 사용할경우
		 비니지스 로직의 변경시 많은 코드 수정이 동반된다 ==> 유지 보수의 어려움

model2 : 요청을 jsp가 접수, 처리는 servlet에서 수행
		 유지보수가 쉬움

MVC 패턴 : Model - View - Controller
		  각 역할을 담당하는 객체를 분리
		  controller : 요청을 접수, 비지니스 로직을 호출 및 저장(scope)
		  Model : 비지니스 로직 처리
		  View : 화면 출력을 담당
		  
		  model1과 다르게 view와 model을 분리
		  view에서 필요한 데이터는 scope 객체를 통해 받는다.

Front Controller : 모든 요청을하나의 객체가 접수 받는 형태
				   장점 : 상속을 한번만(HttpServlet)받아서 객체관리의 편의성



JSP 내장 객체

1. request 
 : javax.servlet.ServletRequest(javax.servlet.http.httpRequest)
   >> client의 http 요청정보를 저장하고 있는 객체
2. response
 : javax.servlet.ServletResponse(javax.servlet.http.httpResponse)
   >>  http 요청에 대한 응답정보를 저장하는 객체
3. session
 : javax.servlet.http.HttpSession
   >> client 가 서버에 접속했을 때 세션정보를 저장한 객체
4. pageContext
 : javax.servlet.jsp.PageContext
   >> 응답 페이지 실행에 필요한 Context정보를 저장한 객체
5. out
 : javax.servlet.jsp.JspWriter
   >> 응답 페이지 전송을 위한 출력 stream
6. application
 : javax.servlet.ServletContext
   >> 동일한 Application 의 Context 정보를 저장하고 있는 객체 
7. config -- 설정에 관련
 : javax.servlet.ServletConfig
   >> 특정 페이지의 서블릿 설정 정볼르 저장하고 있는 객체
8. page
 : java.lang.Object
   >> 특정 페이지의 서블릿 객체(인스턴스화된 객체)
9. exception 
 : java.lang.Throwable
   >> 예외 처리를 위한 객체
